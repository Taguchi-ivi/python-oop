# 演習 ① 〜 ③

# ① DIPとはどんな原則か
# 上位モジュール(目的)が下位モジュール(手段)に依存してはいけない。どちらも抽象に依存すべき。
# DIを使ってインターフェースに依存することにより、具象クラスに依存しないようにする。
# またそれによって変更が容易になり、テストもしやすくなる。

# ② 以下の対立する2つの要素において、下位モジュールはそれぞれどちらか
# どちらがより手段になるかを考えると良い
# - 在庫を管理するクラス vs データベースアクセスを行うクラス
#   データベースアクセスを行うクラス
# - センサーデータを管理するクラス vs センサーデータに基づいてパターン認識を行うクラス
#   センサーデータを管理するクラス
# - 通知を送るクラス vs プッシュ通知を送るクラス
#   プッシュ通知を送るクラス

# ③ DIPの適用によって、共同開発や、ユニットテストがしやすくなる理由は
# 共通のインターフェースに依存することで、具象クラスに依存しないようになるため、別々で開発しても、インターフェースが変わらない限り、影響を受けない。
# テストは、抽象クラスからそれぞれ具象クラスを差し替えることで、テストがしやすくなる。
# answer
# 抽象にクライアントが依存すれば、具象クラスの完成を待つ必要がなくなる
# テスト用のモジュールに切り替えることができるようになるため